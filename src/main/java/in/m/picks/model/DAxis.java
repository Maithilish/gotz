//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB)
// Reference Implementation, v2.2.11
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a>
// Any modifications to this file will be lost upon recompilation of the source
// schema.
// Generated on: 2017.03.11 at 10:13:58 AM IST
//

package in.m.picks.model;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlElements;
import javax.xml.bind.annotation.XmlType;

import org.apache.commons.lang3.builder.EqualsBuilder;
import org.apache.commons.lang3.builder.HashCodeBuilder;
import org.apache.commons.lang3.builder.ToStringBuilder;
import org.apache.commons.lang3.builder.ToStringStyle;

/**
 * <p>
 * Java class for dAxis complex type.
 *
 * <p>
 * The following schema fragment specifies the expected content contained within this
 * class.
 *
 * <pre>
 * &lt;complexType name="dAxis"&gt;
 *   &lt;complexContent&gt;
 *     &lt;extension base="{http://codetab.org/picks}base"&gt;
 *       &lt;sequence&gt;
 *         &lt;group ref="{http://codetab.org/picks}fields"/&gt;
 *         &lt;element ref="{http://codetab.org/picks}member"
 *                     maxOccurs="unbounded" minOccurs="0"/&gt;
 *         &lt;element ref="{http://codetab.org/picks}filter" minOccurs="0"/&gt;
 *       &lt;/sequence&gt;
 *     &lt;/extension&gt;
 *   &lt;/complexContent&gt;
 * &lt;/complexType&gt;
 * </pre>
 *
 *
 */
@XmlAccessorType(XmlAccessType.NONE)
@XmlType(name = "dAxis", propOrder = {"fields", "member", "filter"})
public final class DAxis extends Base implements Serializable {

    private static final long serialVersionUID = 1L;
    @XmlElements({@XmlElement(name = "field", type = Field.class),
            @XmlElement(type = Fields.class)})
    private List<FieldsBase> fields;
    @XmlElement
    private Set<DMember> member = new HashSet<DMember>();
    @XmlElement
    private DFilter filter;

    /**
     * Gets the value of the fields property.
     *
     * <p>
     * This accessor method returns a reference to the live list, not a snapshot.
     * Therefore any modification you make to the returned list will be present inside the
     * JAXB object. This is why there is not a <CODE>set</CODE> method for the fields
     * property.
     *
     * <p>
     * For example, to add a new item, do as follows:
     *
     * <pre>
     * getFields().add(newItem);
     * </pre>
     *
     *
     * <p>
     * Objects of the following type(s) are allowed in the list {@link Field }
     * {@link Fields }
     *
     *
     */
    public List<FieldsBase> getFields() {
        if (fields == null) {
            fields = new ArrayList<FieldsBase>();
        }
        return this.fields;
    }

    /**
     * Gets the value of the member property.
     *
     * <p>
     * This accessor method returns a reference to the live list, not a snapshot.
     * Therefore any modification you make to the returned list will be present inside the
     * JAXB object. This is why there is not a <CODE>set</CODE> method for the member
     * property.
     *
     * <p>
     * For example, to add a new item, do as follows:
     *
     * <pre>
     * getMember().add(newItem);
     * </pre>
     *
     *
     * <p>
     * Objects of the following type(s) are allowed in the list {@link DMember }
     *
     *
     */
    public Set<DMember> getMember() {
        if (member == null) {
            member = new HashSet<DMember>();
        }
        return this.member;
    }

    /**
     * Gets the value of the filter property.
     *
     * @return possible object is {@link DFilter }
     *
     */
    public DFilter getFilter() {
        return filter;
    }

    /**
     * Sets the value of the filter property.
     *
     * @param value
     *            allowed object is {@link DFilter }
     *
     */
    public void setFilter(final DFilter value) {
        this.filter = value;
    }

    /*
     * (non-Javadoc)
     *
     * @see in.m.picks.model.Base#equals(java.lang.Object)
     */
    @Override
    public boolean equals(final Object obj) {
        String[] excludes = {"id", "dnDetachedState", "dnFlags", "dnStateManager"};
        return EqualsBuilder.reflectionEquals(this, obj, excludes);
    }

    /*
     * (non-Javadoc)
     *
     * @see in.m.picks.model.Base#hashCode()
     */
    @Override
    public int hashCode() {
        String[] excludes = {"id", "dnDetachedState", "dnFlags", "dnStateManager"};
        return HashCodeBuilder.reflectionHashCode(this, excludes);
    }

    /*
     * (non-Javadoc)
     *
     * @see in.m.picks.model.Base#toString()
     */
    @Override
    public String toString() {
        return ToStringBuilder.reflectionToString(this, ToStringStyle.MULTI_LINE_STYLE);
    }

}
